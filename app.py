import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from scipy.stats import skew, kurtosis
import plotly.express as px
import pycountry as pc

st.set_page_config(page_title="Felicidade Mundial 2019", layout="wide")

# Dicion√°rio para mapear nomes de pa√≠ses para c√≥digos de duas letras
country_to_alpha2 = {country.name: country.alpha_2 for country in pc.countries}

# Dicion√°rio para mapear c√≥digos de pa√≠ses para continentes
continent_mapping = {
    'AF': 'Africa',
    'NA': 'North America',
    'OC': 'Oceania',
    'AN': 'Antarctica',
    'AS': 'Asia',
    'EU': 'Europe',
    'SA': 'South America'
}

# Dicion√°rio para mapear c√≥digos de pa√≠ses para continentes
country_to_continent = {
    'AF': 'Africa',
    'AL': 'Europe',
    'DZ': 'Africa',
    'AS': 'Asia',
    'AD': 'Europe',
    'AO': 'Africa',
    'AG': 'North America',
    'AR': 'South America',
    'AM': 'Asia',
    'AU': 'Oceania',
    'AT': 'Europe',
    'AZ': 'Asia',
    'BS': 'North America',
    'BH': 'Asia',
    'BD': 'Asia',
    'BB': 'North America',
    'BY': 'Europe',
    'BE': 'Europe',
    'BZ': 'North America',
    'BJ': 'Africa',
    'BT': 'Asia',
    'BO': 'South America',
    'BA': 'Europe',
    'BW': 'Africa',
    'BR': 'South America',
    'BN': 'Asia',
    'BG': 'Europe',
    'BF': 'Africa',
    'BI': 'Africa',
    'KH': 'Asia',
    'CM': 'Africa',
    'CA': 'North America',
    'CV': 'Africa',
    'CF': 'Africa',
    'TD': 'Africa',
    'CL': 'South America',
    'CN': 'Asia',
    'CO': 'South America',
    'KM': 'Africa',
    'CD': 'Africa',
    'CG': 'Africa',
    'CR': 'North America',
    'HR': 'Europe',
    'CU': 'North America',
    'CY': 'Asia',
    'CZ': 'Europe',
    'DK': 'Europe',
    'DJ': 'Africa',
    'DM': 'North America',
    'DO': 'North America',
    'EC': 'South America',
    'EG': 'Africa',
    'SV': 'North America',
    'GQ': 'Africa',
    'ER': 'Africa',
    'EE': 'Europe',
    'SZ': 'Africa',
    'ET': 'Africa',
    'FJ': 'Oceania',
    'FI': 'Europe',
    'FR': 'Europe',
    'GA': 'Africa',
    'GM': 'Africa',
    'GE': 'Asia',
    'DE': 'Europe',
    'GH': 'Africa',
    'GR': 'Europe',
    'GT': 'North America',
    'GN': 'Africa',
    'GW': 'Africa',
    'GY': 'South America',
    'HT': 'North America',
    'HN': 'North America',
    'HU': 'Europe',
    'IS': 'Europe',
    'IN': 'Asia',
    'ID': 'Asia',
    'IR': 'Asia',
    'IQ': 'Asia',
    'IE': 'Europe',
    'IL': 'Asia',
    'IT': 'Europe',
    'JM': 'North America',
    'JP': 'Asia',
    'KE': 'Africa',
    'KI': 'Oceania',
    'KR': 'Asia',
    'KW': 'Asia',
    'KG': 'Asia',
    'LA': 'Asia',
    'LV': 'Europe',
    'LB': 'Asia',
    'LS': 'Africa',
    'LR': 'Africa',
    'LY': 'Africa',
    'LT': 'Europe',
    'LU': 'Europe',
    'MG': 'Africa',
    'MW': 'Africa',
    'MY': 'Asia',
    'MV': 'Asia',
    'ML': 'Africa',
    'MT': 'Europe',
    'MH': 'Oceania',
    'MR': 'Africa',
    'MU': 'Africa',
    'MX': 'North America',
    'FM': 'Oceania',
    'MD': 'Europe',
    'MC': 'Europe',
    'MN': 'Asia',
    'ME': 'Europe',
    'MA': 'Africa',
    'MZ': 'Africa',
    'MM': 'Asia',
    'NA': 'Africa',
    'NR': 'Oceania',
    'NP': 'Asia',
    'NL': 'Europe',
    'NZ': 'Oceania',
    'NI': 'North America',
    'NE': 'Africa',
    'NG': 'Africa',
    'NO': 'Europe',
    'OM': 'Asia',
    'PK': 'Asia',
    'PW': 'Oceania',
    'PA': 'North America',
    'PG': 'Oceania',
    'PY': 'South America',
    'PE': 'South America',
    'PH': 'Asia',
    'PL': 'Europe',
    'PT': 'Europe',
    'QA': 'Asia',
    'RE': 'Africa',
    'RO': 'Europe',
    'RU': 'Europe',
    'RW': 'Africa',
    'WS': 'Oceania',
    'SM': 'Europe',
    'ST': 'Africa',
    'SA': 'Asia',
    'SN': 'Africa',
    'RS': 'Europe',
    'SC': 'Africa',
    'SL': 'Africa',
    'SG': 'Asia',
    'SK': 'Europe',
    'SI': 'Europe',
    'SB': 'Oceania',
    'SO': 'Africa',
    'ZA': 'Africa',
    'ES': 'Europe',
    'LK': 'Asia',
    'SD': 'Africa',
    'SR': 'South America',
    'SZ': 'Africa',
    'SE': 'Europe',
    'CH': 'Europe',
    'SY': 'Asia',
    'TJ': 'Asia',
    'TZ': 'Africa',
    'TH': 'Asia',
    'TG': 'Africa',
    'TO': 'Oceania',
    'TT': 'North America',
    'TN': 'Africa',
    'TR': 'Asia',
    'TM': 'Asia',
    'TV': 'Oceania',
    'UG': 'Africa',
    'UA': 'Europe',
    'AE': 'Asia',
    'GB': 'Europe',
    'US': 'North America',
    'UY': 'South America',
    'UZ': 'Asia',
    'VU': 'Oceania',
    'VE': 'South America',
    'VN': 'Asia',
    'YE': 'Asia',
    'ZM': 'Africa',
    'ZW': 'Africa'
}

###### fun√ß√µes internas ####

def calcular_quartil(df, k):
    N = df['Frequ√™ncia'].sum()
    pos = k * N / 4  # posi√ß√£o do quartil (k=1 ‚Üí Q1, k=2 ‚Üí Q2...)
    
    for i, freq_acum in enumerate(df['Frequ√™ncia Acumulada']):
        if freq_acum >= pos:
            break
    
    classe = df.iloc[i]
    L = classe['Classe'].left
    F_antes = 0 if i == 0 else df.iloc[i - 1]['Frequ√™ncia Acumulada']
    f = classe['Frequ√™ncia']
    h = classe['Classe'].right - classe['Classe'].left
    
    Q = L + ((pos - F_antes) / f) * h
    return Q







def add_continent_column(df, country_col):
    def get_continent(country):
        try:
            # Obter o c√≥digo do pa√≠s a partir do dicion√°rio
            country_code = country_to_alpha2.get(country, None)
            if country_code:
                continent = country_to_continent.get(country_code, 'Unknown')
                return continent
            else:
                return 'Unknown'
        except Exception as e:
            st.write(f"Erro ao processar o pa√≠s: {country}. Erro: {e}")
            return 'Unknown'

    df['continent'] = df[country_col].apply(get_continent)

@st.cache_data
def load_and_prepare_data():
    # Carrega o dataset
    df = pd.read_csv("2019.csv")

    # Criar Score Category com base nos tercis do Score
    tercis = df['Score'].quantile([0.33, 0.66])

    def categorize(score):
        if score <= tercis[0.33]:
            return "Baixo"
        elif score <= tercis[0.66]:
            return "M√©dio"
        else:
            return "Alto"

    df['Score Category'] = df['Score'].apply(categorize)

    # Criar vari√°vel Riqueza baseado no GDP per capita (mediana)
    median_gdp = df['GDP per capita'].median()
    df['Riqueza'] = df['GDP per capita'].apply(lambda x: "Rico" if x >= median_gdp else "Pobre")

    # Adicionar coluna de continente
    add_continent_column(df, 'Country or region')
    
    return df

# Chame a fun√ß√£o para carregar e preparar os dados
df = load_and_prepare_data()


# Definindo cores
background_color = "#ffffff"
text_color = "#000000"
accent_color = "#2c6e74"

# Barra lateral para navega√ß√£o
st.sidebar.title("üîé Navega√ß√£o")
pages = [
    "Introdu√ß√£o",
    "1. Distribui√ß√£o do Score",
    "2. Histogramas e Boxplots",
    "3. tabela de frequ√™ncia do score",
    "4. Assimetria",
    "5. Score x Riqueza",
    "6. GDP vs Vida Saud√°vel",
    "7. Dispers√£o: GDP x Score",
    "8. Heatmap de Correla√ß√µes",
    "9. Generosidade por Continente",
    "10. Liberdade x Categoria de Felicidade",
    "11. Mapa M√∫ndi de Felicidade"
]




###defini√ß√£o de  vari√°veis globais do app
score = df["Score"]
#cria√ß√£o da tabela de frequ√™ncia agrupada para a vari√°vel score
score.info()
score = score
n = len(score)
s = np.std(score, ddof=1)  # desvio padr√£o amostral (ddof=1)
amplitude = score.max() - score.min()

# Calculando largura da classe utilizando m√©todo de scott, acredito que por ter acesso aos dados brutos
# vou encontrar uma presentatovodade melhor nele (bin width)

h = (3.5 * s) / (n ** (1/3))

# Calculando n√∫mero de classes (bins) e minimos
k = int(np.ceil(amplitude / h))
h = int(np.ceil(h))
min = int(np.floor(score.min()))
max = int(np.ceil(score.max()))

#definindo intervalos
bins = list(range(min, max+1,h))
labels = ['2 |-- 3','3 |-- 4','4 |-- 5','5 |-- 6','6 |-- 7', '7 |--|8']
frq_tab_score = pd.cut(score, bins=bins, right=False, labels=labels).value_counts().sort_index()



#bloco de introdu√ß√£o do app 


choice = st.sidebar.radio("Escolha uma se√ß√£o:", pages)

if choice == "Introdu√ß√£o":
    st.title("üåç O Analista Socioecon√¥mico Global")
    st.markdown("""
    Este relat√≥rio explora os fatores socioecon√¥micos associados √† **felicidade mundial** com base no _World Happiness Report 2019_.
    Utilizando an√°lise explorat√≥ria de dados, buscamos responder quest√µes relacionadas √† distribui√ß√£o da felicidade, desigualdade entre pa√≠ses, fatores econ√¥micos, sociais e culturais.
    **Tema:** Economia e Desenvolvimento Social  
    **Fonte:** [Kaggle - World Happiness Report 2019](https://www.kaggle.com/unsdsn/world-happiness)
    """)

## segunda se√ß√£o: distribui√ß√£o da vari√°vel score



elif choice == "1. Distribui√ß√£o do Score":
    
    st.write(""" O score de felicidade foi uma medida obtida em 2015
             ao se perguntar √†s pessoas como elas classificariam sua felicidade de 0 a 10.""" )
    st.write("E esse vai ser a nossa vari√°vel pricipal para avalia√ß√£o")
    st.write("""Dito isso, o primeiro passo √© vermos as estat√≠sticas descritivas sobre 
             essa vari√°vel. Seguem abaixo.
          """)
    
    
    st.header("1Ô∏è‚É£ Distribui√ß√£o do Score de Felicidade")
    st.write(df['Score'].describe())
    st.markdown("""
    Olhando para a tabela acima e tomando como refer√™ncia o valor da m√©dia e do desvio padr√£o, 
    vemos que, no intervalo entre m√©dia - 1 desvio padr√£o e m√©dia + 1 desvio padr√£o, os primeiro 
    e terceiro quartis est√£o inclu√≠dos. Isso significa que pelo menos 50% dos dados est√£o dentro 
    desse intervalo, o que refor√ßa a hip√≥tese de que a distribui√ß√£o segue a regra emp√≠rica 
    dos 68, 95, 99,7 ‚Äî podendo, portanto, estar muito pr√≥xima de uma distribui√ß√£o normal.
    """)
    st.write("""Por outro lado, se olharmos os valores de m√©dia e mediana, temos a mediana ligeiramente menor que a m√©dia, com uma diferen√ßa bem m√≠nima. Podemos supor, ent√£o, que a distribui√ß√£o √© fracamente assim√©trica √† direita.
Mas calma ‚Äî ainda n√£o d√° pra concluir nada com certeza! """)
    st.write("Passe para a pr√≥xima e vamos explorar mais um pouco, analisando os gr√°ficos! ")


### ter√ßeira se√ß√£o: gr√°ficos que mostram a a distribui√ß√£o da vari√°vel score ##


elif choice == "2. Histogramas e Boxplots":
    st.header("2Ô∏è‚É£ Histogramas e Boxplots do Score")
     
    
    fig, ax = plt.subplots(figsize=(7, 5))
    sns.boxplot(x=df['Score'], ax=ax, color='#ff7f0e')
    ax.set_title("Boxplot do Score")
    plt.tight_layout()
    
    
    #exibi√ß√£o dos gr√°ficos e comentario embaixo
    
    st.write("""Nesse momento vamos buscar evidenciar nossa tese sobre a assimetria da distribui√ß√£o dos 
             dados 
             para isso podemos calcular o coeficiente de assimetria para a vari√°vel score seguindo o 
             m√©todo de Skewness""")
    #calculo feito com m√©todo de skewnes. a fun√ß√£o existente no pandas
    skewness = skew(df['Score'])
    
    st.write(f"**Assimetria:** {skewness:.4f}")
    st.write(f"""Como podemos ver, o valor do coeficiente de assimetria confirma nossa suposi√ß√£o. 
             O valor de {skewness:.4f} indica uma assimetria fraca e positiva.
            """)
    st.write("Podemos, ent√£o, representar isso graficamente com um boxplot.")
    
    st.pyplot(fig)
    st.write("Perceba que, mesmo com o gr√°fico, a diferen√ßa na distribui√ß√£o √© pouco percept√≠vel. Parece at√© que os dados est√£o perfeitamente e igualmente distribu√≠dos.")
    st.write("O que faremos na sequ√™ncia √© representar melhor essa distribui√ß√£o, de modo que possamos enxergar de fato o que est√° acontecendo.")
    st.write("V√° para a pr√≥xima se√ß√£o.")
    
    #quarta parte: agrupamento dos dados.


elif choice == "3. tabela de frequ√™ncia do score":
    st.header("3Ô∏è‚É£ Tabela de frequ√™ncia do Score")
    
    st.write("""Como estamos tratando de dados quantitativos cont√≠nuos, √© muito conveniente agrupar esses dados,
 criando uma tabela de frequ√™ncia de classes.""")

    
    #criando a tabela de frequ√™ncia
        
    n = len(score)
    s = np.std(score, ddof=1)  # desvio padr√£o amostral (ddof=1)
    amplitude = score.max() - score.min()
    

    # Calculando largura da classe utilizando m√©todo de scott, acredito que por ter acesso aos dados brutos
    # vou encontrar uma presentatividade melhor nele (bin width)

    h = (3.5 * s) / (n ** (1/3))

    # Calculando n√∫mero de classes (bins) e minimos
    k = int(np.ceil(amplitude / h))
    h = int(np.ceil(h))
    min = int(np.floor(score.min()))
    max = int(np.ceil(score.max()))

    #definindo intervalos
    bins = list(range(min, max+1,h))
    labels = ['2 |-- 3','3 |-- 4','4 |-- 5','5 |-- 6','6 |-- 7', '7 |--|8']
    frq_tab_score = pd.cut(score, bins=bins, right=False, labels=labels).value_counts().sort_index()
    
    st.write(f"""Utilizaremos o m√©todo de Scott por se aplicar bem a uma quantidade m√©dia de dados, para calcular o n√∫mero 
    de classes k ({k}). Da√≠ calculamos a amplitude h de cada classe ({h}) e
    tomaremos como valor √≠nfimo o piso do menor valor da s√©rie; criamos as classes e 
    distribu√≠mos as ocorr√™ncias.""")

    st.write("Construindo a tabela, temos:")

    st.write(frq_tab_score)

    st.write("""Olhando a tabela de frequ√™ncias, podemos observar uma concentra√ß√£o dos dados nas classes de intervalos de 4-5 e 5-6.""")

    st.write("Para uma melhor leitura, vamos construir um histograma a partir da tabela.")

    
    #constru√ß√£o do gr√°fico do histograma######
    labels = [str(interval) for interval in frq_tab_score.index]
    frequencias = frq_tab_score.values

    # Criar gr√°fico tipo histograma (manual)
    fig, ax = plt.subplots(figsize=(10, 6))

    plt.bar(labels, frequencias, edgecolor='black')
    bars = plt.bar(
        labels, 
        frequencias, 
        color='#1f77b4', 
        width=1.0,
        edgecolor='black'
        # Ajuste a largura aqui (padr√£o √© 0.8)
    )
    plt.xlabel('Intervalos de Score')
    plt.ylabel('Frequ√™ncia')
    plt.title('Histograma por Classes (Score)')
    plt.xticks(rotation=360)
    plt.tight_layout()
    
    ####apresenta√ß√£o
    st.pyplot(fig)
    st.write("Agora temos uma melhor visualiza√ß√£o da distribui√ß√£o. Podemos calcular para esses dados agrupados as medidas descritivas.")
    st.write("Podemos perceber, neste ponto, que h√° uma concentra√ß√£o de observa√ß√µes nos valores de 4 a 6 e que a maior parte dos dados est√° concentrada mais √† direita.")
    st.write("A partir dos dados agrupados, podemos tamb√©m refazer os c√°lculos das medidas descritivas e reconstruir o boxplot feito anteriormente.")

       ### #m√©dia ####
    # 1. Calcular os pontos m√©dios dos intervalos
    classes = list(range(2,9,1))
    midpoints = [(i+i+1)/2 for i in classes]

    # 2. Frequ√™ncias
    frequencias = frq_tab_score.values

    # 3. Produto frequ√™ncia * ponto m√©dio
    produto_fx = [f * x for f, x in zip(frequencias, midpoints)]

    # 4. M√©dia
    AGmedia = sum(produto_fx) / sum(frequencias)

    ###########quartis 
    #formatar um data frame com as medidas necess√°rias 
    classes = pd.IntervalIndex.from_tuples([(2, 3), (3, 4), (4, 5), (5, 6),(6,7),(7,8)])
    frequencias = frq_tab_score.values
    df2 = pd.DataFrame({'Classe': classes, 'Frequ√™ncia': frequencias})
    df2['Frequ√™ncia Acumulada'] = df2['Frequ√™ncia'].cumsum() 

    qa1 = calcular_quartil(df2, 1)  #qa1 s√£o as medidas de posi√ß√£o feitas a partir dos dados agrupados 
    qa2 = calcular_quartil(df2, 2)  # Mediana
    qa3 = calcular_quartil(df2, 3)

    minimo = df2['Classe'].apply(lambda x: x.left).min()
    maximo = df2['Classe'].apply(lambda x: x.right).max()
    st.write(f"M√©dia:\n{AGmedia:.4f}\nQ1:\n{qa1:.4f}\nQ2 (Mediana):\n{qa2:.4f}\nQ3:\n{qa3:.4f}")

    st.write(f"""Note que o valor da m√©dia permanece e a mediana mant√©m sua leve diferen√ßa em compara√ß√£o com os dados
    n√£o agrupados.\nM√©dia: {AGmedia:.4f} > Mediana: {qa2:.4f}""")

    st.write("Tendo em m√£os esses valores, podemos recriar o boxplot.")

    #a mediana se mant√©m minimamente menor que a m√©dia. logo n√£o perdemos essa informa√ß√£o dos dados iniciais

    boxplot_data = {
        'med': qa2,
        'q1': qa1,
        'q3': qa3,
        'whislo': minimo,
        'whishi': maximo,
        'fliers': []  # sem outliers, pois n√£o temos dados individuais
    }

    bxp, ax = plt.subplots(figsize=(6, 5))
    ax.axvline(qa2, color='green', linestyle='--', label=f'Mediana = {qa1}')
    ax.bxp([boxplot_data], showfliers=False, vert=False)  # aqui est√° a mudan√ßa
    ax.set_title('Boxplot para dados agrupados')
    ax.set_xlabel('Valores')  # trocar ylabel por xlabel, j√° que o gr√°fico fica horizontal
    ax.grid(True)
    
    
    st.write("Veja abaixo como fica o boxplot para esse agrupamento.")
    st.pyplot(bxp)
    st.write("""Perceba o 'bigode' da esquerda com comprimento maior em rela√ß√£o ao da direita. Isso demonstra que os dados est√£o mais afastados dos valores mais baixos,
            logo concentrados nos valores mais √† direita.""")

    st.write("Na pr√≥xima se√ß√£o, vejamos as varia√ß√µes da vari√°vel.")




elif choice == "4. Assimetria":
    
    st.write("Agora que temos os dados organizados de uma maneira agrad√°vel, vamos ver como ocorre a varia√ß√£o desses dados.")
    st.write("Tomar m√£o de medidas como:")

    
    #calculo das medidas de varia√ß√£o 
    #a diferen√ßa ainda √© minima entre m√©dia ou seja fracamente assim√©trica. mas nessa forma de apresenta√ß√£o j√° podemos ver que os dados est√£o concentrados mais a direita 

    classes = [(2, 3), (3, 4), (4, 5), (5, 6),(6,7),(7,8)]
    frequencias = frq_tab_score.values
    pontos_medios = [(a + b) / 2 for a, b in classes]

    # Total de elementos
    n = sum(frequencias)

    # M√©dia
    media = sum(f * x for f, x in zip(frequencias, pontos_medios)) / n

    # Desvios centralizados
    desvios = [x - media for x in pontos_medios]

    # Vari√¢ncia
    variancia = sum(f * (d ** 2) for f, d in zip(frequencias, desvios)) / n

    # Desvio padr√£o
    desvio_padrao = np.sqrt(variancia)

    # Coeficiente de assimetria de fisher para dados agrupados 
    assimetria = sum(f * (d ** 3) for f, d in zip(frequencias, desvios)) / (n * desvio_padrao ** 3)

    # Curtose
    curtose = sum(f * (d ** 4) for f, d in zip(frequencias, desvios)) / (n * desvio_padrao ** 4)

    # Curtose-excesso (opcional)
    curtose_excesso = curtose - 3

    tabela = pd.DataFrame({
    'Medida': ['M√©dia', 'vari√¢ncia', 'desvio padr√£o', 'coef assimetria','coeficiente de curtose'],
    'Valor': [media,variancia, desvio_padrao, assimetria,curtose_excesso]
    })
    st.write(tabela)
    st.write("""A m√©dia dos dados √© 5,45 e a vari√¢ncia √© 1,36, com desvio padr√£o de 1,16 ‚Äî indicando uma dispers√£o
    moderada em torno da m√©dia. O coeficiente de assimetria √© praticamente zero (0,0267), o que mostra
    que a distribui√ß√£o √© fracamente assim√©trica. J√° a curtose √© -0,72, o que indica uma distribui√ß√£o
    platic√∫rtica, ou seja, mais achatada que a normal.
    """)

    st.write("√â poss√≠vel visualizar ainda melhor isso no gr√°fico de curva de densidade.")

    
    
    #cria√ß√£o da tabela de frequ√™ncia agrupada para a vari√°vel score
    score.info()
    score = score
    n = len(score)
    s = np.std(score, ddof=1)  # desvio padr√£o amostral (ddof=1)
    amplitude = score.max() - score.min()

    # Calculando largura da classe utilizando m√©todo de scott, acredito que por ter acesso aos dados brutos
    # vou encontrar uma presentatovodade melhor nele (bin width)

    h = (3.5 * s) / (n ** (1/3))

    # Calculando n√∫mero de classes (bins) e minimos
    k = int(np.ceil(amplitude / h))
    h = int(np.ceil(h))
    min = int(np.floor(score.min()))
    max = int(np.ceil(score.max()))

    #definindo intervalos

    bins = list(range(min, max+1,h))
    
    
    fig2, ax = plt.subplots(figsize=(8, 5))
    # Histograma com densidade
    sns.histplot(score, bins=bins, kde=True, stat="density", edgecolor="black", color="lightblue")

    # Personaliza√ß√£o
    plt.title("Histograma com Curva de Frequ√™ncia (KDE)")
    plt.xlabel("Score")
    plt.ylabel("Densidade")
    plt.grid(True)
    plt.tight_layout()
    
    st.pyplot(fig2)
    st.write("""Onde podemos ver o achatamento sendo criado pela concentra√ß√£o dos dados nas duas classes centrais.""")

    st.write('''Note que, apesar do coeficiente de assimetria nos mostrar uma assimetria positiva, temos a impress√£o
        que √© o oposto. Uma solu√ß√£o para esta distor√ß√£o seria eliminar a primeira classe, pois h√° apenas 1 pa√≠s nela,
        que cria essa impress√£o. Mas como nosso intuito √© observar todos os pa√≠ses, vamos deixar essa coluna a√≠.''')

#parte da sara e nayla 


elif choice == "5. Score x Riqueza":
    st.header("5Ô∏è‚É£ Felicidade x Riqueza do Pa√≠s")
    st.markdown("""
                > O gr√°fico de barras empilhadas nos mostra visualmente o padr√£o descrito na tabela, na barra dos pa√≠ses pobres maior predomin√¢ncia da cor azul que representa baixa felicidade, j√° a barra dos pa√≠ses ricos √© predominantemente azul claro, mostrando alta felicidade. A categoria m√©dia de felicidade se mostra mais equilibrada em ambos os grupos e menos expressiva em termos de quantidade. 
    """)
    crosstab = pd.crosstab(df['Riqueza'], df['Score Category'])
    st.write(crosstab)
    st.bar_chart(crosstab)
    st.markdown("""
                ## Conclus√£o:
                > Pa√≠ses ricos tendem a ser mais felizes, enquanto pa√≠ses pobres tendem a ser menos felizes. Isso indica que a correla√ß√£o entre riqueza e felicidade √© positiva, apesar de n√£o ser uma rela√ß√£o determin√≠stica, a tend√™ncia √© muito evidente.
    """)
    
elif choice == "6. GDP vs Vida Saud√°vel":
    st.header("6Ô∏è‚É£ Correla√ß√£o entre PIB per capita e Expectativa de Vida Saud√°vel")
    st.markdown("""
                > O gr√°fico apresenta uma correla√ß√£o forte positiva entre o GDP e Healthy life expectancy, por isso √† medida que o GDP aumenta, tamb√©m aumenta a expectativa de vida saud√°vel. A distribui√ß√£o dos pontos na tabela sugere uma tend√™ncia crescente, mostrando que pa√≠ses com maior renda proporcionam condi√ß√µes de vida melhores e mais saud√°veis.
                > O coeficiente de correla√ß√£o (corr = 0.84) mostra que h√° uma rela√ß√£o densa e consider√°vel, pois quanto maior a renda m√©dia por pessoa de um pa√≠s, maior a expectativa de vida com sa√∫de de seus habitantes. De forma geral, o gr√°fico nos mostra uma ideia clara de que a riqueza contribui para o bem estar da popula√ß√£o, provavelmente por meio do melhor acesso √† sa√∫de, educa√ß√£o, seguran√ßa, infraestrutura e lazer.
    """)
    corr = df[['GDP per capita', 'Healthy life expectancy']].corr().iloc[0, 1]
    st.write(f"Correla√ß√£o de Pearson: {corr:.2f}")
    fig = px.scatter(df, x='GDP per capita', y='Healthy life expectancy',
                     color='Score Category', title='GDP vs Vida Saud√°vel')
    st.plotly_chart(fig)

elif choice == "7. Dispers√£o: GDP x Score":
    st.header("7Ô∏è‚É£ Diagrama de Dispers√£o: GDP per capita x Score de Felicidade")
    st.markdown("""
                > O gr√°fico nos mostra uma tend√™ncia ascendente clara entre o GDP e o Score de Felicidade, pois conforme o GDP aumenta, o score de felicidade tamb√©m tende a aumentar. Os pontos azuis (felicidade alta) se concentram no canto superior direito, o que indica que os pa√≠ses ricos, em sua maioria, t√™m maiores √≠ndices de felicidade. Os pontos rosa (baixa felicidade) se concentram no canto inferior esquerdo, representando pa√≠ses com desenvolvimento e felicidade m√©dia/baixa. Os dados apresentam uma rela√ß√£o positiva entre renda e felicidade. 
    """)
    fig = px.scatter(df, x='GDP per capita', y='Score',
                     color='Score Category', hover_name='Country or region')
    st.plotly_chart(fig)

elif choice == "8. Heatmap de Correla√ß√µes":
    st.header("8Ô∏è‚É£ Mapa de Calor das Correla√ß√µes")
    st.markdown("""
                ## 1. √çndice de Felicidade: Como as Dimens√µes Socioecon√¥micas Importam:
                O √≠ndice de felicidade correlaciona-se positiva e fortemente com tr√™s vari√°veis principais, sendo elas:
                - **GDP per capita**: r = 0.79  
                > Isso significa que a riqueza m√©dia nacional est√° entre os fatores mais associados √† felicidade. Quanto mais desenvolvida a economia de um pa√≠s, melhor √© a condi√ß√£o de vida dos habitantes.
                - **Social support (Apoio social)**: r = 0.78  
                > A presen√ßa de apoio social (amigos e familiares), tem contribui√ß√£o igual ao fator econ√¥mico no n√≠vel de bem estar das pessoas.
                - **Expectativa de vida saud√°vel**: r = 0.78  
                > A capacidade de viver uma vida longa e saud√°vel est√° fortemente relacionada a percep√ß√£o de felicidade.
                Isso significa que os fatores estruturais e b√°sicos de bem estar s√£o os principais determinantes do √≠ndice de felicidade.
                
                ## 2. O Overall Rank √© um reflexo inverso do Score:
                >Como o papel do overall rank √© ser inverso a todas as outras vari√°veis, todas est√£o correlacionadas negativamente com ele. As mais fortes s√£o:
                 - **Score** r = -0.99
                >Como a correla√ß√£o negativa √© praticamente perfeita, isso valida a coluna score como base para a cria√ß√£o do ranking
                - **GDP per capita** (r = -0.80) e **Healthy life expectancy** (r = -0.79):
                >Mostra que pa√≠ses ricos e saud√°veis ‚Äã‚Äãtendem a ocupar altas posi√ß√µes no ranking.
                
                ## 3. Liberdade e corrup√ß√£o possui um papel moderado na felicidade:

                - **Liberdade para fazer escolhas de vida**: r = 0.57  
                > Isto √©, ter liberdade para fazer escolhas importantes na vida contribui significativamente para o bem-estar percebido

                - **Percep√ß√µes de corrup√ß√£o**: r = 0.39  
                > Embora tenha uma correla√ß√£o positiva, seu efeito √© mais limitado. Isso significa que a corrup√ß√£o percebida n√£o afetou diretamente a felicidade da popula√ß√£o em n√≠vel pr√≥ximo.

                ## 4. Generosity: A Shockingly Weak Factor

                - **A generosidade**: r = 0.08  
                > Tem correla√ß√£o de quase zero com o Score geral. Esta vari√°vel parece apontar o fato de que, embora seja cr√≠tico ao n√≠vel individual, o n√≠vel de generosidade de um pa√≠s n√£o afeta de forma significativa a felicidade dos habitantes.

                ## 5. Rela√ß√µes entre as vari√°veis explicativas:

                - **GDP per capita vs. Healthy life expectancy**: r = 0.84  
                > Pa√≠ses mais ricos t√™m maior qualidade de vida e longevidade.

                - **Social support vs. Freedom to make life choices**: r = 0.45  
                > As redes de apoio social fortalecem a autonomia.

                - **Perceptions of corruption vs. Freedom to make life choices**: r = 0.44  
                > A corrup√ß√£o reduz a sensa√ß√£o de liberdade.

                ## Conclus√£o:

                > A matriz de correla√ß√£o mostra que fatores estruturais b√°sicos para a vida do ser humano t√™m maior correla√ß√£o com a felicidade percebida no pa√≠s.  
                > Caracter√≠sticas mais subjetivas (como generosidade e percep√ß√£o de corrup√ß√£o), embora tenham influ√™ncia, possuem menor relev√¢ncia na an√°lise.
           


        """)
    
    colors = ["#fd9091", "#feb369", "#76e1e9", "#62d8ba", "#b497e5"]
    custom_cmap = LinearSegmentedColormap.from_list("custom_cmap", colors)
    numeric_cols = df.select_dtypes(include=np.number)
    corr_matrix = numeric_cols.corr(method='pearson')
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.set_style("white")
    heatmap = sns.heatmap(
        corr_matrix,
        annot=True,
        fmt=".2f",
        cmap=custom_cmap,
        linewidths=0.5,
        linecolor=background_color,
        cbar_kws={"shrink": 0.8},
        annot_kws={"color": text_color}
    )

    plt.title("Matriz de Correla√ß√£o", fontsize=16, color=accent_color)
    plt.xticks(rotation=45, ha="right", color=text_color)
    plt.yticks(rotation=0, color=text_color)
    plt.gcf().patch.set_facecolor(background_color)
    plt.tight_layout()
    st.pyplot(fig)
    
elif choice == "9. Generosidade por Continente":
    st.subheader("üì¶ Distribui√ß√£o da Generosidade por Continente")
    df_valid = df[df['continent'] != 'Unknown']
    st.markdown("""
                 ## Principais an√°lises por continente:
                 - **Europe**:
                 > √â percept√≠vel uma grande dispers√£o dos dados por causa dos bigodes mais extensos e da caixa mais larga, tem uma mediana pr√≥xima de 0.15 mostrando uma generosidade moderada.
              
                 - **Oceania**:
                 > Possui apenas um valor vis√≠vel (0.33), provavelmente mostrando que seus dois pa√≠ses (Nova Zel√¢ndia e Austr√°lia) t√™m n√≠veis de felicidade iguais ou muito pr√≥ximos, al√©m de ser um valor alto e sem dispers√£o, indica uma uniformidade nos dados, apesar de ser uma amostra pequena. 
              
                 - **North America**:
                 > A generosidade √© moderada, tamb√©m com a mediana em 0.15, mas possui outliers altos (acima de 0.4) indicando que alguns pa√≠ses s√£o muito mais generosos que a m√©dia da regi√£o.
              
                 - **Asia**:
                 > A generosidade possui sua mediana pouco acima de 0.2, com uma grande variabilidade e maior presen√ßa de outliers, indicando que, apesar da regi√£o ter uma generosidade moderada, possui pa√≠ses muito generosos e isso gera uma grande diversidade no continente.
              
                 - **South America**:
                 > Possui a mediana mais baixa, comparado com os outros continentes, de aproximadamente 0.12 e com pouca varia√ß√£o, indicando que os pa√≠ses possuem os n√≠veis de generosidade muito pr√≥ximos, por√©m baixos. 
              
                 - **Africa**:
                 > Possui a mediana semelhante a √Åsia, mais pr√≥xima de 0.18, tendo uma distribui√ß√£o mais concentrada com uma leve presen√ßa de outliers altos, mostrando uma generosidade moderada com menor taxa de dispers√£o. 

                 ## Conclus√£o:
                 > Apesar da Oceania ter a maior taxa de generosidade, n√£o pode ser tomada como uma informa√ß√£o relevante por possuir uma amostra muito limitada. A Am√©rica do Sul possui a taxa de generosidade mais baixa e com a menor dispers√£o de dados. A Am√©rica do Norte, √Åsia e Europa t√™m as maiores varia√ß√µes internas, indicando maior taxa de desigualdade entre pa√≠ses da mesma regi√£o. 


     """)
    if not df_valid.empty:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.boxplot(data=df_valid, x='continent', y='Generosity', palette='Set2')
        plt.title('Distribui√ß√£o da Generosidade por Continente')
        plt.xlabel('Continente')
        plt.ylabel('Generosidade')
        plt.xticks(rotation=45)
        st.pyplot(fig)
    else:
        st.warning("N√£o h√° dados suficientes para exibir o gr√°fico de generosidade por continente.")
        

elif choice == "10. Liberdade x Categoria de Felicidade":
    st.header("üîü Liberdade para cada Categoria de Felicidade")
    st.markdown("""
                - **Alta felicidade**:
                > √â a categoria que possui a maior m√©dia (0.487), isso indica que pessoas que vivem em pa√≠ses mais felizes sentem que t√™m maior liberdade para tomar decis√µes de vida. Possui uma distribui√ß√£o, com desvio padr√£o de 0.092, mais concentrada, o que apresenta maior consist√™ncia interna. Sua mediana (0.495) √© bem pr√≥xima da m√©dia, sugerindo uma certa simetria. O intervalo interquartil √© de 0.121, representando uma dispers√£o moderada.
                
                - **M√©dia felicidade**:
                > A m√©dia da categoria √© 0.375, o que nos mostra uma liberdade moderada. Tem uma dispers√£o de dados maior que da categoria anterior, mas menor que da categoria posterior. A mediana (de 0.389) tamb√©m √© pr√≥xima da m√©dia, que apresenta-nos uma distribui√ß√£o tamb√©m sim√©trica. O intervalo interquartil √© de 0.187, mais alto que o da categoria anterior, sugere que h√° maior diversidade entre os pa√≠ses. 
                
                - **Baixa felicidade**:
                > √â a categoria que apresenta a menor m√©dia (0.314) e a menor mediana (0.322), indicando que as pessoas nesses pa√≠ses sentem que t√™m menor liberdade para fazer escolhas de vida. Al√©m disso, √© a categoria que tem a maior dispers√£o (desvio padr√£o de 0.153), ou seja, existem muitos pa√≠ses em situa√ß√µes cr√≠ticas, possui alguns pa√≠ses com n√≠veis aceit√°veis (m√°ximo da categoria 0.609, maior que a m√©dia dos outros), mas tamb√©m tem pa√≠ses onde a percep√ß√£o de liberdade √© praticamente nula (m√≠nimo da categoria 0.000). Essa categoria √© a que apresenta a distribui√ß√£o mais assim√©trica e mais desigual.

    """)
    group_stats = df.groupby('Score Category')['Freedom to make life choices'].describe()
    st.write(group_stats)
    
    st.markdown("""
                ## Conclus√£o:
                > Percebe-se que a percep√ß√£o de liberdade est√° fortemente associada √† felicidade. Pa√≠ses mais felizes t√™m n√≠veis m√©dios de liberdade mais altos e distribui√ß√µes mais sim√©tricas. J√° os pa√≠ses menos felizes t√™m n√≠veis m√©dios de liberdade menor e maior assimetria nas distribui√ß√µes. O que faz-se entender que liberdade e igualdade s√£o fatores indispens√°veis para o bem estar de uma sociedade e de seu desenvolvimento social.

    """)
    fig, ax = plt.subplots()
    sns.boxplot(data=df, x='Score Category', y='Freedom to make life choices', palette='pastel')
    ax.set_title("Liberdade x Categoria de Felicidade")
    st.pyplot(fig)

elif choice == "11. Mapa M√∫ndi de Felicidade":
    st.header("üåç Mapa M√∫ndi de Felicidade")
    st.markdown("""
                > Este mapa utiliza a escala de cores pra representar o n√≠vel de felicidade em cada pa√≠s. Os tons de amarelo indicam pa√≠ses com maior felicidade, enquanto os tons de roxo mostram onde a menor n√≠vel de felicidade.
              * O mapa √© interativo, ao passar o mouse sobre um pa√≠s, exibe um pequeno texto com seus dados espec√≠ficos.**

    """)
    # Criar um DataFrame para o mapa
    map_df = df[['Country or region', 'Score', 'GDP per capita', 'Healthy life expectancy', 'Generosity', 'Freedom to make life choices']]
    
    # Criar o mapa com uma paleta de cores personalizada em verde e roxo
    fig = px.choropleth(
        map_df,
        locations='Country or region',  # Nome do pa√≠s
        locationmode='country names',  # Usar nomes de pa√≠ses
        color='Score',  # Cor baseada no Score
        hover_name='Country or region',  # Nome do pa√≠s ao passar o mouse
        hover_data={
            'GDP per capita': True,
            'Healthy life expectancy': True,
            'Generosity': True,
            'Freedom to make life choices': True,
            'Score': True
        },
        color_continuous_scale=px.colors.sequential.Viridis,  # Paleta de cores verde e roxo
        title='Mapa M√∫ndi de Felicidade 2019',
        labels={'Score': 'Score de Felicidade'},
        width=1000,  # Aumentar a largura do mapa
        height=600   # Aumentar a altura do mapa
    )
    
    st.plotly_chart(fig)
